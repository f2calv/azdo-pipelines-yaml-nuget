parameters:
- name: BuildConfiguration
  displayName: Select BuildConfiguration
  type: string
  default: release
  values:
  - release
  - debug

trigger:
  branches:
    include:
    - master
    - hotfix
    - feature
  paths:
    include:
    - .azure-pipelines
    - MyPkgLib
    - MyPkgLib.Tests
    exclude:
    - README.md

variables:
- group: nuget-public
- name: BuildConfiguration
  value: ${{ parameters.BuildConfiguration }}

pool:
  vmImage: windows-latest #because we have a .NET 4.7.2 target

jobs:
- job: build
  steps:
  - checkout: self
    persistCredentials: true

  #- pwsh: dotnet tool update -g GitVersion.Tool
  - pwsh: gitversion /output buildserver /nofetch
    displayName: gitversion

  - pwsh: Write-Host "##vso[Build.UpdateBuildNumber]$(GitVersion.NuGetVersion)"
    displayName: UpdateBuildNumber

  - pwsh: |
      git tag $(GitVersion.NuGetVersion)
      git push origin --tags
    displayName: git push origin semver
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: UseDotNet@2
    displayName: .NET Core 3.1.x SDK
    inputs:
      version: 3.1.x
  
  - task: UseDotNet@2
    displayName: .NET 5.x SDK
    inputs:
      version: 5.x
      includePreviewVersions: true

  - pwsh: dotnet --list-sdks
    displayName: dotnet --list-sdks

  #note: this dotnet restore step is actually unnecessary as dotnet build does a restore by default, left for clarity
  #todo: cache the output of this for faster build speed?
  - pwsh: dotnet restore
    displayName: dotnet restore
  
  - pwsh: dotnet build --nologo -c $(BuildConfiguration) --verbosity minimal -p:Version='$(GitVersion.NuGetVersion)'
    displayName: dotnet build

  - pwsh: dotnet test --nologo -c $(BuildConfiguration) --no-build -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura
    displayName: dotnet test

  # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
  # First install the tool on the machine, then run it
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:$(Build.SourcesDirectory)/src/*.Tests/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
    displayName: reportgenerator

  # Publish the code coverage result (summary and web site)
  # The summary allows to view the coverage percentage in the summary tab
  # The web site allows to view which lines are covered directly in Azure Pipeline
  - task: PublishCodeCoverageResults@1
    #displayName: Publish code coverage
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/src/CodeCoverage/Cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)/src/CodeCoverage/

  - pwsh: dotnet pack --nologo -c $(BuildConfiguration) --no-build --include-symbols -o $(Build.ArtifactStagingDirectory) -p:Version='$(GitVersion.NuGetVersion)'
    displayName: dotnet pack

  - pwsh: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg --skip-duplicate -s https://api.nuget.org/v3/index.json --api-key $(f2calvNuGet)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: dotnet nuget push (public)

  - pwsh: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg --skip-duplicate -s https://apiint.nugettest.org/v3/index.json --api-key $(f2calvNuGetInt)
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: dotnet nuget push (preview)