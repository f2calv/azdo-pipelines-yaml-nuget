parameters:
- name: BuildConfiguration
  displayName: Select BuildConfiguration
  type: string
  default: release
  values:
  - release
  - debug

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - .azure-pipelines
    - MyPkgLib
    - MyPkgLib.Tests
    exclude:
    - README.md

variables:
  BuildConfiguration: ${{ parameters.BuildConfiguration }}
  ProjectName: MyPkgLib
  Version.Major: 1
  Version.Minor: 2
  Version.PackageMajorMinor: $(Version.Minor).$(Version.Major)-$(ProjectName)
  Version.Revision: $[counter(variables['Version.PackageMajorMinor'], 0)]
  PackageVersion: $(Version.Major).$(Version.Minor).$(Version.Revision)

pool:
  vmImage: windows-latest

jobs:
- job: build
  steps:
  
  #note: this dotnet restore step is actually unnecessary as dotnet build does a restore by default, left for clarity
  - task: DotNetCoreCLI@2
    displayName: dotnet restore script
    inputs:
      command: restore
      projects: |
        **/$(ProjectName).csproj
        **/$(ProjectName).Tests.csproj
  
  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: |
        **/$(ProjectName).csproj
        **/$(ProjectName).Tests.csproj
      arguments: --configuration $(BuildConfiguration) --verbosity minimal --output $(Build.ArtifactStagingDirectory)

  - publish: $(Build.ArtifactStagingDirectory)
 

- job: test
  dependsOn: build
  steps:

  #- task: DownloadPipelineArtifact@2
  #  inputs:
  #    artifact: drop

  - task: DotNetCoreCLI@2
    displayName: dotnet test + calculate code coverage via coverlet
    inputs:
      command: test
      projects: '**/*.Tests/*.csproj'
      arguments: --configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

  - script: echo Version.PackageMajorMinor=$(Version.PackageMajorMinor)
    displayName: DEBUG PackageMajorMinor

  #below script is *almost* the same as the DotNetCoreCLI dotnet test above - however doesn't allow wildcard matching AND the test results don't display??
  #- script: dotnet test $(Build.SourcesDirectory)\MyPkgLib.Tests\MyPkgLib.Tests.csproj --logger trx --results-directory $(Agent.TempDirectory) --configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
  #  displayName: dotnet test + calculate code coverage via coverlet

  - script: dir *.cobertura.xml /S /B
    displayName: DEBUG search for coverlet files

  # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
  # First install the tool on the machine, then run it
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:$(Build.SourcesDirectory)/*.Tests/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
    displayName: Create Code coverage report

  # Publish the code coverage result (summary and web site)
  # The summary allows to view the coverage percentage in the summary tab
  # The web site allows to view which lines are covered directly in Azure Pipeline
  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)/CodeCoverage/

- job: publish
  dependsOn: test
  variables:
    group: nuget-public
  steps:
  
  - task: DotNetCoreCLI@2
    displayName: dotnet pack
    inputs:
      command: pack
      configuration: $(BuildConfiguration)
      packagesToPack: '**/$(ProjectName).csproj' # Required when command == pack
      #packDirectory: $(Build.ArtifactStagingDirectory)   #this should be the Pipeline download directory but didn't figure out how to skip the second build yet
      versioningScheme: byEnvVar      # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
      versionEnvVar: PackageVersion   # Required when versioningScheme == byEnvVar
      verbosityPack: normal
      #buildProperties: 'SymbolPackageFormat=snupkg'    #not needed because elements added to csproj

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: 5.0.2
      #checkLatest: false # Optional

  - pwsh: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg --skip-duplicate -s https://api.nuget.org/v3/index.json --api-key $(f2calvNuGet)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: dotnet nuget push (public)

  - pwsh: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg --skip-duplicate -s https://apiint.nugettest.org/v3/index.json --api-key $(f2calvNuGetInt)
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: dotnet nuget push (preview)