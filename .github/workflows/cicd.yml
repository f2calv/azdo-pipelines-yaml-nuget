name: test

on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    #runs-on: self-hosted
    runs-on: ubuntu-latest
    
    environment: dev

    #https://docs.github.com/en/actions/reference/environment-variables
    env:
      DOTNET_NOLOGO: true
      BuildConfiguration: Release
      buildLogFile: ${{ github.workspace }}build.log
      runTests: true
      SourcesDirectory: ${{ github.workspace }}
      ArtifactStagingDirectory: ${{ github.workspace }}/artifacts
      CoverageInclude: '*'

    steps:
    #https://github.com/actions/checkout
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 #required for GitVersion

    # - task: NuGetAuthenticate@0 #run nuget auth to allow access to private azure artifact feed
    #   condition: contains(variables['NuGetServerFeedUrl'], 'pkgs.dev.azure.com')

    - name: dotnet nuget add source
      run: |
        dotnet nuget add source ${{ env.NUGET_URL }} \
          -n github \
          -u ${{ secrets.REGISTRY_USER }} \
          -p ${{ secrets.REGISTRY_TOKEN }} \
          --store-password-in-clear-text
      if: false #todo: need to add secrets

    # - pwsh: |
    #     #dotnet tool update -g GitVersion.Tool
    #     GitVersion ${{ env.SourcesDirectory }} /output buildserver /nofetch
    #   condition: eq(variables['Agent.OS'], 'Windows_NT')
    #   displayName: GitVersion (Windows)
    #   failOnStderr: true

    # - bash: |
    #     dotnet tool update -g GitVersion.Tool
    #     $HOME/.dotnet/tools/dotnet-gitversion ${{ env.SourcesDirectory }} /output buildserver /nofetch
    #   condition: eq(variables['Agent.OS'], 'Linux')
    #   displayName: GitVersion (Linux)

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x
      if: false #don't think this step is necessary on github hosted runners

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      id:   gitversion
      with:
        useConfigFile: true

      #if: eq(variables['Agent.OS'], 'Linux') #how to check this in actions?

    # Build.UpdateBuildNumber - not possible in actions? maybe there is an alternative/similar action?

    # Build.AddBuildTag - not possible in actions? maybe there is an alternative/similar action?

    - run: dotnet --list-sdks

    - name: .NET Core 3.1.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
      if: false #don't think this step is necessary on github hosted runners

    - name: .NET Core 5.0.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
      if: false #don't think this step is necessary on github hosted runners
    
    - name: dotnet restore
      run: dotnet restore --verbosity minimal --configfile nuget.config
  
    - name: dotnet build
      run: dotnet build --no-restore -p:Version='${{ steps.gitversion.outputs.semVer }}' -p:SourceRevisionId=${{ github.GITHUB_SHA }} -c ${{ env.BuildConfiguration }} /flp:v=q /flp:logfile=${{ env.buildLogFile }}
      #if: false

    # - template: ../templates/steps.dotnet.warnings-v1.yml
    #   parameters:
    #     buildLogFile: ${{ env.buildLogFile }}

    #^ this needs some work...

    - name: dotnet test
      run: dotnet test --no-restore --no-build -c ${{ env.BuildConfiguration }} -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura #-p:Include="${{ env.CoverageInclude}}"
      #if: env.runTests == true

    - name: reportgenerator (Linux)
      run: |
        dotnet tool update -g dotnet-reportgenerator-globaltool
        reportgenerator '-reports:${{ env.SourcesDirectory }}/src/*.Tests/coverage.*.cobertura.xml' -targetdir:${{ env.SourcesDirectory }}/CodeCoverage '-reporttypes:Html;Cobertura'

    # - task: PublishCodeCoverageResults@1
    #   enabled: ${{ env.runTests }}
    #   inputs:
    #     codeCoverageTool: Cobertura
    #     summaryFileLocation: ${{ env.SourcesDirectory }}/CodeCoverage/Cobertura.xml
    #     reportDirectory: ${{ env.SourcesDirectory }}/CodeCoverage/

    #^ this needs some work...

    - name: dotnet pack
      run: dotnet pack -c ${{ env.BuildConfiguration }} --no-build --include-symbols -o ${{ env.ArtifactStagingDirectory }} -p:Version='${{ steps.gitversion.outputs.semVer }}'
      #if: false

    # - task: CopyFiles@2
    #   inputs:
    #     Contents: |
    #       *.nupkg
    #       *.snupkg
    #     targetFolder: ${{ env.ArtifactStagingDirectory }}

    # - publish: ${{ env.ArtifactStagingDirectory }}

    #https://github.com/actions/upload-artifact
    - uses: actions/upload-artifact@v2
      with:
        path: ${{ env.ArtifactStagingDirectory }}
      #if: false

    # - pwsh: dotnet nuget push ${{ env.ArtifactStagingDirectory }}/**/*.nupkg --skip-duplicate -s $(NuGetServerFeedUrl) --api-key $(NuGetServerApiKey)
    #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/head/master'), and(ne(variables['Build.SourceBranch'], 'refs/head/master'), ne(variables['Build.Reason'], 'PullRequest'))))
    #   displayName: dotnet nuget push
    #   failOnStderr: true

    - name: dotnet nuget push
      run: dotnet nuget push ${{ env.ArtifactStagingDirectory }}/**/*.nupkg --skip-duplicate -s ${{ secrets.NUGETSOURCEURL }} --api-key ${{ secrets.NUGETSERVERAPIKEY }}
      if: false

    # - task: GithubRelease@0
    #   enabled: ${{ ne(parameters.githubConnection, '') }}
    #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/head/master')) #, not(contains(variables['NuGetServerFeedUrl'], 'pkgs.dev.azure.com'))
    #   inputs:
    #     githubConnection: ${{ parameters.githubConnection }}
    #     action: create
    #     tag: ${{ env.GitVersion.NuGetVersion }}

    - name: git tag
      run: |
        git tag ${{ env.GitVersion.NuGetVersion }}
        git push origin --tags
      if: github.ref == 'refs/heads/master'

    #https://github.com/actions/create-release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.GitVersion.NuGetVersion }}
        # release_name: Release ${{ github.ref }}
        # body: |
        #   Changes in this Release
        #   - First Change
        #   - Second Change
        # draft: false
        # prerelease: false
