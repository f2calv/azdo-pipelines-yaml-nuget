jobs:
- job: PublishJob
  pool:
    vmImage: $(vmImage)
  steps:
  
  #Download artifact to: d:\a\1\a
  #- task: DownloadPipelineArtifact@1

  - task: DotNetCoreCLI@2
    displayName: dotnet pack
    inputs:
      command: pack
      configuration: '$(buildConfiguration)'
      packagesToPack: '**/$(ProjectName).csproj' # Required when command == pack
      #packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
      nobuild: true # Optional
      #versioningScheme: 'byBuildNumber'#uses name above
      versioningScheme: byEnvVar      # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
      versionEnvVar: PackageVersion   # Required when versioningScheme == byEnvVar
      #majorVersion: '1'
      #minorVersion: '0'
      #patchVersion: '1'
      #buildProperties: # Optional
      verbosityPack: normal # Options: quiet, minimal, normal, detailed, diagnostic
      #includeSymbols: true
  
  #echo d:\a\1\a/drop/MyPkgLib/MyPkgLib.csproj
  #- script: echo $(Build.ArtifactStagingDirectory)/drop/$(ProjectName)/$(ProjectName).csproj

  #echo d:\a\1\a/drop/MyPkgLib/MyPkgLib.csproj
  #- script: echo $(System.ArtifactsDirectory)/drop/$(ProjectName)/$(ProjectName).csproj

  #WORKING - because it rebuilds+restores
  #dotnet pack MyPkgLib/MyPkgLib.csproj -c Release /p:PackageVersion=1.0.7 --output d:\a\1\a
  #- script: dotnet pack $(ProjectName)/$(ProjectName).csproj -c $(buildConfiguration) /p:PackageVersion=$(PackageVersion) --output $(Build.ArtifactStagingDirectory)

  #BROKEN - found packages, but can't find build
  #- script: dotnet restore
  #- script: dotnet pack $(ProjectName)/$(ProjectName).csproj -c $(buildConfiguration) /p:PackageVersion=$(PackageVersion) --output $(Build.ArtifactStagingDirectory) --no-build

  #BROKEN - can't find
  #dotnet pack MyPkgLib/MyPkgLib.csproj -c Release /p:PackageVersion=1.0.8 --output d:\a\1\a --no-build --no-restore
  #- script: dotnet pack $(ProjectName)/$(ProjectName).csproj -c $(buildConfiguration) /p:PackageVersion=$(PackageVersion) --output $(Build.ArtifactStagingDirectory) --no-build --no-restore

  #- script: dotnet pack $(Build.ArtifactStagingDirectory)/drop/$(ProjectName)/$(ProjectName).csproj -c $(buildConfiguration) /p:PackageVersion=$(PackageVersion) --output $(Build.ArtifactStagingDirectory) --no-build --no-restore

  #- script: dotnet pack $(System.ArtifactsDirectory)/$(ProjectName)/$(ProjectName).csproj -c $(buildConfiguration) /p:PackageVersion=$(PackageVersion) --output $(Build.ArtifactStagingDirectory) --no-build --no-restore

  #- script: dotnet pack $(System.ArtifactsDirectory)/drop/$(ProjectName)/$(ProjectName).csproj -c $(buildConfiguration) /p:PackageVersion=$(PackageVersion) --output $(Build.ArtifactStagingDirectory) --no-build --no-restore
  
  #- task: PublishBuildArtifacts@1
  #  displayName: perform artifact drop
  
  # Push NuGet packages.
  #- task: DotNetCoreCLI@2
  #  displayName: dotnet push
  #  inputs:
  #    command: push
  #    nuGetFeedType: internal # Required when command == push. Options: internal, external
  #    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg' # Required when command == push
  #    publishVstsFeed: '$(ARTIFACT_FEED_ID)' # Required when command == push && NuGetFeedType == internal
  #    #publishFeedCredentials: # Required when command == push && NuGetFeedType == external

  - task: NuGetCommand@2
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: f2calvNuGetInt
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'