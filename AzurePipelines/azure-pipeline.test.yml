jobs:
- job: TestJob
  pool:
    vmImage: $(vmImage)
  steps:
#  - task: DotNetCoreCLI@2
#    displayName: dotnet test
#    inputs:
#      command: test
#      projects: '**/*.Tests/*.csproj'
#      #arguments: '--configuration $(buildConfiguration) --logger trx'
#      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./CodeCoverage'
#      #nobuild: true    #need to figure out PipelineArtifacts

  - script: |
      dotnet --version
      dir $(Build.SourcesDirectory)\MyPkgLib.Tests\
      echo 'dotnet test $(Build.SourcesDirectory)\MyPkgLib.Tests\MyPkgLib.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
      dotnet test $(Build.SourcesDirectory)\MyPkgLib.Tests\MyPkgLib.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
      cd
      dir $(Build.SourcesDirectory)\MyPkgLib.Tests\

#:\Program Files\dotnet\dotnet.exe" test d:\a\1\s\MyPkgLib.Tests\MyPkgLib.Tests.csproj --logger trx --results-directory d:\a\_temp --configuration Release --output d:\a\1\a /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./CodeCoverage
#  - task: PublishPipelineArtifact@0
#    inputs:
#      artifactName: drop
#      #targetPath: $(Build.ArtifactStagingDirectory)

  # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
  # First install the tool on the machine, then run it
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      cd
      reportgenerator -reports:$(Build.SourcesDirectory)\MyPkgLib.Tests\coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
    displayName: Create Code coverage report

  # Publish the code coverage result (summary and web site)
  # The summary allows to view the coverage percentage in the summary tab
  # The web site allows to view which lines are covered directly in Azure Pipeline
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'